
Vase: A container for data-driven services
============================================

This system provides a data-driven way to describe and run RESTful APIs that
are backed by a durable database (Datomic).


### Getting started

If you are new to the project, please review the [design document](docs/design_doc.mkd).

If you're looking to get started with Vase, follow the tutorial: [Building your first API](docs/your_first_api.mkd).


#### Notable system components

 * TODO


## Usage

TODO - need to write the "How to use this as a library" doc

## Configuration

To configure logging see config/logback.xml. By default, the app logs to stdout and `logs/`.
To learn more about configuring Logback, read its [documentation](http://logback.qos.ch/documentation.html).

The [Datomic Schema](http://docs.datomic.com/schema.html) is located in the [resource directory](./resources/schema.edn)

#### System Config

There also exists an [application/service level configuration file](./config/system.edn)

Use this file to:

 * Set the port that the service runs: `:service-port` *default: 8080*
 * Toggle upsert on or off (always on in dev mode): `:enable-upsert` *true*
   * If turned off but other upsert options are turned on, those other options will
     appear functional, but have no affect on the application
 * Toggle upsert over http on or off: `:http-upsert` *true*
 * Toggle transacting a history of upsert changes into the DB: `:transact-upsert` *true*
 * Set an initial descriptor file to load when the service starts: `:initial-descriptor` *"sample-descriptor.edn"*
   * This is a string of a JVM Resource-path file
 * Set an initial version of an API to load when the service starts: `:initial-version` *[:example :v1]*

#### Datomic Config

Datomic is configured through its transactor/storage conf file - that is set/determined by the user.

