
## What am I covering?

 * POINTs - problems, obstacles, insights, needs, themes
 * Project/Software metrics - quantify our results
 * This is a conversation

## Motivation and context

 * Less work with simple tools, give more results
 * Tools should work in the small and in the large

### What were our goals?

 * Deliver tools/templates for building/prototyping RESTful services
   * CR-ocs
 * Deliver tools for importing existing CR data into Datomic (for the services)
   * CR-ane
 * Deliver a full-stack experience that embodies our previous notions of
   modifiability, usability, reusability, and composability
   * CR-aniate

### Emerging themes

 * Modifiability
   * idea to results in hours, not days or weeks
   * Iteration is "speed of thought"
 * Usability
   * Conform with [Nielsen's Heuristics](https://en.wikipedia.org/wiki/Heuristic_evaluation#Nielsen.27s_heuristics)
   * Clean, purposeful, simple designs and systems
   * You don't need to be a domain expert to experience a ROI
 * Reusability
   * Components from one concept/idea can be used in or consumed by another
    concept/idea
 * Composability
   * Solutions/concepts can be "merged"
 * Simple tools make powerful systems possible
   * Immutability

### What got delivered

#### CR-ocs

Deliver a tools/templates for RESTful services that:

 * Enable rapid prototyping and experimentation
 * Require little or no knowledge of entire backend infrastructure
 * Provide data persistence with Datomic - in dev or prod mode
 * Can be deployed locally on a laptop or as a live service
 * Allows data and services to be correctly versioned, where versions could iterate independently

Interesting facts:

 * The "service descriptor" is just a data file (edn), so it can be stored in a DB, sent "over the wire", etc.
 * Datomic Schema and service APIs can be altered/updated/evolved as needed, in sane/safe ways
 * The descriptor is actually stored in Datomic!
 * The system is entirely extensible
 * It can be used with Datomic Free or Datomic Pro
 * It can optionally be deployed within Immutant/JBoss
 * It requires no programming (unless you extend)

#### CR-ane

Deliver tools for importing existing CR data into Datomic (for the services) that:

 * Can be extended to work with any incoming data source
 * Performs necessary type conversion of incoming data
 * Aids developers in Datomic data modeling best practices
 * Can be deployed locally on a laptop or as a live service

Interesting facts:

 * Imports all of the JCR data (JSON) and all of the user review data (XML) in under 30 seconds.
 * Fully supports upserting
 * Produces schema hints that can be copied and pasted directly in CR-ocs Descriptors
 * Fully extensible for file format, hinting, and type conversion
 * It can be used with Datomic Free or Datomic Pro

#### CR-aniate

Deliver a "full-stack" system using all of the tools available that:

 * Is built using whatever tools you want
 * Makes use of reusable components
 * Uses Datomic
 * Embodies the themes/design principles of the previous efforts


## Metrics

### Every project...

 * Done by two developers (including Paul as Tech lead), and a Coach (Naoko)
 * Adjusted scope requirements throughout the project (embraced in agile with a small "a")
 * Delivered within 16-24 days (4-6 weeks, Monday-Thursday)
 * Included an executable/usable project, requirements doc, design doc, user guide, code, test harness
 * Produced a declarative, data-driven system
 * Can be run with a single command
 * Collectively make up ~450 commits, ~2400 lines of code/space/code-docs, ~3300 lines of narrative docs/design
   * Individually: 150 commits, 800 lines of code, 1100 lines of doc/design
   * For Clojure, that's about 5 functions a day, per developer - the average Clojure function with doc string is 4-6 lines

### CR-ocs

 * Initial, runnable, functionally-complete system in 13 days
 * 32 story points across 5 epics

### CR-ane

 * Initial, runnable, functionally-complete system in 8 days
 * 35 story points across 7 epics
 * Loads all Product/ratings and user review data within 30 seconds

### CR-aniate

 * Initial, runnable, functionally-complete system in 8 days
 * 15 story points across 3 epics (not including polish and presentation)
 * Full app renders happen within 10 ms
 * XHR returning data directly out of Datomic within 100-150 ms
 * Full page loading (including remote calls) happens within 300 ms
 * Entire application (including all libs) is a single JS file: 330Kb  (jQuery tooling is 365Kb)
 * Our ratings app turned 1000 lines of HTML + ~2000 lines of JS into
   26 lines of an application descriptor and 200 lines of ClojureScript (reusable components)
 * Apps support hot-loading/swapping (without recompiling)
 * Apps are composed of reusable UI components and "cells", described in
   data-only application descriptors (stored in a DB, sent over a wire, put in local storage, CDN, etc),
   and requires no programming
 * The core system under the hood is entirely extensible - custom UI components, custom functionality
 * Built on React.js, ClojureScript, core.async, Google Closure

